branches:
  - name: releases/next
    channel: channel-next
tagFormat: release_v${version}
plugins:
  - "@semantic-release/commit-analyzer"
  - "@semantic-release/release-notes-generator"
  - "@semantic-release/changelog"
  # - "@semantic-release/git"
  - "@semantic-release/exec"
  # - gradle-semantic-release-plugin
  # - "@semantic-release/github"
# verifyConditions:
#   - '@semantic-release/git'
#   - '@semantic-release/github'
analyzeCommits:
  - path: "@semantic-release/commit-analyzer"
    releaseRules:
      - type: docs
        release: patch
      - type: refactor
        release: patch
      - scope: no-release
        release: false
      - type: feat
        release: patch
      - type: "fix"
        release: patch
      - type: chore
        release: patch
      - type: "patch"
        release: patch
      - type: minor
        release: minor
      - type: breaking
        release: minor
generateNotes:
  - path: "@semantic-release/release-notes-generator"
    preset: conventionalcommits
    presetConfig:
      writerOpts:
        groupBy: "type"
        commitGroupsSort:
          - "feat"
          - "perf"
          - "fix"
        commitsSort: "header"
      types:
      - type: "feat"
      - section: "Features"
      - type: "hotfix"
      - section: "Bug Fixes"
      - type: "fix"
      - hidden: true
      - type: "chore"
      - hidden: true
      - type: "docs"
      - hidden: true
      - type: "doc"
      - hidden: true
      - type: "style"
      - hidden: true
      - type: "refactor"
      - hidden: true
      - type: "perf"
      - hidden: true
      - type: "test"
      - hidden: true
verifyRelease:
  - path: "@semantic-release/exec"
    verifyReleaseCmd: |
      set -x
      echo 'The new release number is: ${nextRelease.version}'
      sed -i -e 's/\(VERSION_NAME=\)\(.*$\)/\1${nextRelease.version}/g' gradle.properties
# prepareRelease:

    